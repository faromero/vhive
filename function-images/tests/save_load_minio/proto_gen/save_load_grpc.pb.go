// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaveAndLoadClient is the client API for SaveAndLoad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaveAndLoadClient interface {
	// Sends a greeting
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeReply, error)
}

type saveAndLoadClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveAndLoadClient(cc grpc.ClientConnInterface) SaveAndLoadClient {
	return &saveAndLoadClient{cc}
}

func (c *saveAndLoadClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeReply, error) {
	out := new(InvokeReply)
	err := c.cc.Invoke(ctx, "/proto_gen.SaveAndLoad/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaveAndLoadServer is the server API for SaveAndLoad service.
// All implementations must embed UnimplementedSaveAndLoadServer
// for forward compatibility
type SaveAndLoadServer interface {
	// Sends a greeting
	Invoke(context.Context, *InvokeRequest) (*InvokeReply, error)
	mustEmbedUnimplementedSaveAndLoadServer()
}

// UnimplementedSaveAndLoadServer must be embedded to have forward compatible implementations.
type UnimplementedSaveAndLoadServer struct {
}

func (UnimplementedSaveAndLoadServer) Invoke(context.Context, *InvokeRequest) (*InvokeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedSaveAndLoadServer) mustEmbedUnimplementedSaveAndLoadServer() {}

// UnsafeSaveAndLoadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaveAndLoadServer will
// result in compilation errors.
type UnsafeSaveAndLoadServer interface {
	mustEmbedUnimplementedSaveAndLoadServer()
}

func RegisterSaveAndLoadServer(s grpc.ServiceRegistrar, srv SaveAndLoadServer) {
	s.RegisterService(&SaveAndLoad_ServiceDesc, srv)
}

func _SaveAndLoad_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveAndLoadServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.SaveAndLoad/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveAndLoadServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaveAndLoad_ServiceDesc is the grpc.ServiceDesc for SaveAndLoad service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaveAndLoad_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_gen.SaveAndLoad",
	HandlerType: (*SaveAndLoadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _SaveAndLoad_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "save_load.proto",
}
